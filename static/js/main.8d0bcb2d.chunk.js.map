{"version":3,"sources":["components/Header.js","components/Cards.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","href","id","Component","Cards","_this","this","alt","props","src","image","onClick","shuffle","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_this$setState","console","log","state","cards","find","card","clicked","setState","map","defineProperty","Pictures","length","sort","Math","random","currentClicks","totalClicks","_this2","components_Header","components_Cards","key","name","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d0bcb2d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n            <nav>\r\n            <div className=\"nav-wrapper grey dark-5\">\r\n              <a href=\"#\" className=\"brand-logo\">&nbsp;React Memory Game - Don't Click the Same Toy Twice!</a>\r\n              <ul id=\"nav-mobile\" className=\"right hide-on-small-and-down\">\r\n                <li><a href=\"\">Score</a></li>\r\n                <li><a href=\"\">Save</a></li>\r\n                <li><a href=\"\">Restart</a></li>\r\n              </ul>\r\n            </div>\r\n          </nav>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { SSL_OP_SINGLE_DH_USE } from 'constants';\r\n\r\nclass Cards extends Component { \r\n    render() {\r\n        return (\r\n            <div className=\"col\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-image\">\r\n                        <img alt={this.props.alt} src={this.props.image} \r\n                        onClick={() => this.props.shuffle(this.props.id)}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cards;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Cards from './components/Cards';\nimport Pictures from './pictures.json'\n\nclass App extends Component {\n  // This is very confusing\n  constructor(props) {\n    super(props);\n    this.state = { \n      cards: Pictures,\n      totalClicks: Pictures.length,\n      currentClicks: 0\n    };\n    console.log(this.state);\n  }\n// this shuffles all cards \n  shuffle = id => {\n    console.log(\"shuffle\", id)\n    // sets/saves card for purposes of these functions.\n    const card = this.state.cards.find(card => card.id === id);\n    //if clicked, resets score to 0/ json length\n    if (card.clicked) {\n      this.setState({\n        //maps array sets all cards to false again\n        cards: this.state.cards.map(card => {\n          card.clicked = false\n          return card\n      }),\n        cards: Pictures,\n        totalClicks: Pictures.length,\n        currentClicks: 0\n        \n      })\n      // if not previously clicked, sets clicked to true on the card that was clicked\n    } else {\n      this.setState({\n        cards: this.state.cards\n        .map(card => {\n          if(card.id === id) {\n            card.clicked = true;\n          }\n          return card;\n        }) // and shuffles all cards.\n        .sort(() => 0.5 - Math.random()),\n        currentClicks: this.state.currentClicks + 1\n      })\n    }\n  }\n\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <div className=\"container center\">\n          <div className=\"row center\">\n            Score: {this.state.currentClicks} / {this.state.totalClicks}\n          </div>\n          <div className=\"row center\">\n            {\n              this.state.cards.map(card => (\n                <Cards\n                  key={card.id}\n                  id={card.id}\n                  alt={card.name}\n                  image={card.image}\n                  clicked={card.clicked}\n                  shuffle={this.shuffle}\n                />\n              ))\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n// render() {\n//   return (\n//     <div>\n//       <Header />\n//       <div className=\"container\">\n//         <div className=\"row\">\n//           <Cards\n//             key={card.id}\n//             alt={card.name}\n//             image={card.image}\n//             clicked={card.clicked}\n//           />\n//           <Cards\n//             key={Pictures[1].id}\n//             alt={Pictures[1].name}\n//             image={Pictures[1].image}\n//             clicked={Pictures[1].clicked}\n//           />\n//           <Cards\n//             key={Pictures[2].id}\n//             alt={Pictures[2].name}\n//             image={Pictures[2].image}\n//             clicked={Pictures[2].clicked}\n//           />\n\n//           <Cards\n//             key={Pictures[3].id}\n//             alt={Pictures[3].name}\n//             image={Pictures[3].image}\n//             clicked={Pictures[3].clicked}\n//           />\n//         </div>\n//         <div className=\"row\">\n//           <Cards\n//             key={Pictures[4].id}\n//             alt={Pictures[4].name}\n//             image={Pictures[4].image}\n//             clicked={Pictures[4].clicked}\n//           />\n//           <Cards\n//             key={Pictures[5].id}\n//             alt={Pictures[5].name}\n//             image={Pictures[5].image}\n//             clicked={Pictures[5].clicked}\n//           />\n\n//           <Cards\n//             key={Pictures[6].id}\n//             alt={Pictures[6].name}\n//             image={Pictures[6].image}\n//             clicked={Pictures[6].clicked}\n//           />\n//           <Cards\n//             key={Pictures[7].id}\n//             alt={Pictures[7].name}\n//             image={Pictures[7].image}\n//             clicked={Pictures[7].clicked}\n//           />\n//         </div>\n//         <div className=\"row\">\n//           <Cards\n//             key={Pictures[8].id}\n//             alt={Pictures[8].name}\n//             image={Pictures[8].image}\n//             clicked={Pictures[8].clicked}\n//           />\n\n//           <Cards\n//             key={Pictures[9].id}\n//             alt={Pictures[9].name}\n//             image={Pictures[9].image}\n//             clicked={Pictures[9].clicked}\n//           />\n//           <Cards\n//             key={Pictures[10].id}\n//             alt={Pictures[10].name}\n//             image={Pictures[10].image}\n//             clicked={Pictures[10].clicked}\n//           />\n//           <Cards\n//             key={Pictures[11].id}\n//             alt={Pictures[11].name}\n//             image={Pictures[11].image}\n//             clicked={Pictures[11].clicked}\n//           /></div>\n//         <div className=\"row\">\n//           <Cards\n//             key={Pictures[12].id}\n//             alt={Pictures[12].name}\n//             image={Pictures[12].image}\n//             clicked={Pictures[12].clicked}\n//           />\n//           <Cards\n//             key={Pictures[13].id}\n//             alt={Pictures[13].name}\n//             image={Pictures[13].image}\n//             clicked={Pictures[13].clicked}\n//           />\n//           <Cards\n//             key={Pictures[14].id}\n//             alt={Pictures[14].name}\n//             image={Pictures[14].image}\n//             clicked={Pictures[14].clicked}\n//           />\n\n//           <Cards\n//             key={Pictures[15].id}\n//             alt={Pictures[15].name}\n//             image={Pictures[15].image}\n//             clicked={Pictures[15].clicked}\n//           />\n//         </div>\n\n//       </div>\n//     </div>\n//   );\n// }\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}